version: '3.8'

services:
  account-service:
    build: ./account-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/accounts
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      mysql:
        condition: service_healthy

  item-service:
    build: ./item-service
    ports:
      - "8082:8082"
    depends_on:
      - mongodb
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/item
      - JWT_SECRET=${JWT_SECRET}

#  cassandra:
#    image: cassandra:4.1.3
#    container_name: cassandra
#    ports: [ "9042:9042" ]
#    environment:
#      - CASSANDRA_CLUSTER_NAME=dev-cluster
#      - CASSANDRA_DC=dc1
#      - CASSANDRA_RACK=rack1
#      - CASSANDRA_SEEDS=cassandra
#      - CASSANDRA_LISTEN_ADDRESS=auto
#      - CASSANDRA_RPC_ADDRESS=0.0.0.0
#      - CASSANDRA_BROADCAST_ADDRESS=cassandra
#      - CASSANDRA_BROADCAST_RPC_ADDRESS=cassandra
#      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
#    volumes:
#      - cassandra_data:/var/lib/cassandra
#    healthcheck:
#      test: [ "CMD-SHELL","cqlsh 127.0.0.1 9042 -e 'SHOW VERSION;' || exit 1" ]
#      interval: 15s
#      timeout: 10s
#      retries: 40
#      start_period: 90s
#
#  cassandra-init:
#    image: cassandra:4.1.3
#    depends_on:
#      cassandra:
#        condition: service_healthy
#    entrypoint: [ "sh","-lc" ]
#    command: >
#      echo "Ensuring keyspace 'orders'..." &&
#      until cqlsh cassandra 9042 -e "CREATE KEYSPACE IF NOT EXISTS orders WITH replication = {'class':'SimpleStrategy','replication_factor':1};";
#      do echo "Cassandra not ready, retry in 3s..."; sleep 3; done &&
#      echo "Keyspace 'orders' ready."
#    restart: "no"

  order-service:
    build: ./order-service
    ports: [ "8083:8083" ]
    depends_on:
      mysql:
        condition: service_healthy
#      cassandra:
#        condition: service_healthy
#      cassandra-init:
#        condition: service_completed_successfully
    environment:
      - SERVER_PORT=8083
      - JWT_SECRET=${JWT_SECRET}
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/orders
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - ITEM_SERVICE_URL=http://item-service:8082
#      - ASTRA_CLIENT_ID=${ASTRA_CLIENT_ID}
#      - ASTRA_CLIENT_SECRET=${ASTRA_CLIENT_SECRET}
  # payment-service:
  #   build: ./payment-service
  #   ports:
  #     - "8084:8084"
  #   depends_on:
  #     - kafka

  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: accounts
#    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-proot"]
      interval: 5s
      timeout: 3s
      retries: 30

  mongodb:
    image: mongo:6
    ports:
      - "27017:27017"

#  zookeeper:
#    image: bitnami/zookeeper:latest
#    ports:
#      - "2181:2181"
#    environment:
#      - ALLOW_ANONYMOUS_LOGIN=yes
#
#  kafka:
#    image: confluentinc/cp-kafka:7.5.0
#    container_name: kafka
#    depends_on:
#      - zookeeper
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_LISTENER: PLAINTEXT://:9092
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
#      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

volumes:
  mysql_data:
  # kafka_data:
  # mongo_data:
